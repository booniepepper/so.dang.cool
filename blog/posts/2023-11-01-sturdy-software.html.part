<center><h1 id='sturdy-software'>
  Sturdy Software
</h1></center>

<hr>

<p><em>
  In which I attempt to counterbalance excess in software.
</em></p>


<h2 id='agility-the-virtue'>Agility, the Virtue</h2>

<p>
  There are many virtues in software. A list would include things like
  simplicity, elegance, cleanliness, flexibility, generality, and of course
  many more. As the senior engineer will tell you, "it depends," and different
  communities will give different answers for their list of virtues and the
  relative priorities.
</p>
<p>
  <a href='https://agilemanifesto.org'>Agility</a> is a virtue in the software
  business. This is undeniable, and many tales sing the praises of rapid
  development and how it can <a href='http://www.paulgraham.com/avg.html'>beat
  the averages</a>. It's also unavoidable, and simply selling the idea of
  "Agile" has in itself become an industry.
</p>
<aside>
  The majority of "Agile" practices and content, in my experience, is neither
  agile either by <a href='https://agilemanifesto.org'>the agile manifesto's
  definition</a> or <a href='https://www.merriam-webster.com/dictionary/agile'>
  a dictionary definition</a>. That's a story for a different time.
</aside>
<p>
  Much of business is about adapting. New fields arise, new markets, new
  competitors. Products decay, and the tools they were created with decay as
  well. Software is no different from other industries. If anything, the
  ephemeral nature of software pushes the birth/growth/decay/death cycle
  away from the human and closer to that of the fruit fly.
</p>


<h2 id='agility-the-excess'>Agility, the Excess</h2>

<p>
  While agility is a virtue in the software <em>business</em> (and it certainly
  is!) and also a virtue in the practice of crafting software, it is not a
  universal virtue of all software.
</p>
<p>
  If you've created software for any amount of time, consider a tree of
  <em>dependencies</em> that changes often; the churn, noise, and breaking
  changes it delivers. This could be an update to a library, a utility, a
  language, or anything. You also may not have a choice but to upgrade these:
  vulnerabilities can force upgrades not just of the vulnerable software but
  its transitive dependencies too. Surely you must upgrade, and so your pace of
  change is influenced by the pace of change of your dependencies as well.
</p>
<p>
  Dependencies like this can be <a href='https://www.bleepingcomputer.com/news/security/researcher-hacks-over-35-tech-firms-in-novel-supply-chain-attack/'>
  a major concern</a> for tech folks and their customers. It's also a drain on
  software teams that have to spend time untangling their own unique tangles of
  dependencies and (often) build software and (why?) plugins to that build
  software, and the dependencies of <em>that</em> software too!
</p>
<aside>
  While I have been putting Java behind me, I feel obliged at this point to beg
  Gradle to consider backwards compatibility, and to beg Java devs to consider
  <a href='https://rife2.com/bld'>bld</a>.
</aside>
<p>
  Let's also not forget that for software end-users, the changes to our end
  products is far more disturbing. Minor changes to software like document
  editors, mobile device interfaces, spreadsheet software, and email clients
  may be a minor nuisance to the software engineer who hones their senses for
  troubleshooting. <a href='https://www.nngroup.com/articles/computer-skill-levels/'>
  Most users</a> do not have the skills to adapt as quickly, and get stuck
  unable to do the things they need to do for their life or livelihood. Even
  worse, they may be trained to stay on old vulnerable software (that is at
  least usable!) for that same reason. A change to the location of a button on
  email software can disrupt a nation, but we lack the metrics to prove it.
</p>
<p>
  That's not to say UI/UX is not important, or that dependencies aren't
  important. It's just that the most important things, of course, are...
</p>


<h2 id='features-features-features'>Features, Features, Features</h2>

<p>
  In the software gen pop it's all about <em>features</em>. If you make
  software that does something serious, like help a heart beat or stop a
  speeding vehicle, this probably doesn't apply to you. If you make a web
  service that takes a request, does something unimpressive, and then replies
  to the requester (hey, I've been there!) then features your life. The same
  goes for websites, mobile apps, online games, and many other areas.
</p>
<p>
  What is a feature anyway? How is it different from the requirements that
  make it up? (Were those functional or non-functional requirements?) When does
  it become a "user story" and is that better or worse than a feature request?
  Should it go in the sprint right now, or in the backlog for prioritization
  later? If we put it in the sprint, we'll take something equivalent out right?
  Right...?
</p>
<p>
  I'm going to hand-wave the distinctions away and call that all "features."
  A feature is some missing property of software that we think will make our
  company some money. If we make "the company" some money, surely we'll be
  blessed with recognition and promotion. You've heard of
  <a href='https://www.catb.org/jargon/html/C/cargo-cult-programming.html'>
  "Cargo Cult" programming</a>, but we've moved on to another level with our
  cargo cult careers. Software is never done, and always full of infinite
  revenue-generating potential, if only we would add the perfect features that
  the customers can't help but desire!
</p>
<p>
  How exactly do we translate features to value, and value to revenue? Are we
  enriching the platform? Well, we don't know exactly, but we can certainly
  convince ourselves it's possible. The evidence is, in fact, overwhelming that
  this has been working out ok in the open market. Trillions of dollars are
  invested in technology, and profits have made many into millionaires. Projects
  that are green are yellow, and yellow are red, and we'll ignore Fred Brooks
  and put more people on the red projects, thank you very much.
</p>
<p>
  Again, this is not "help a heart beat" software, which as far as I can tell
  is not a major part of the industry, and certainly not flooded with excess
  capital. This is also not about research or prototyping where the
  requirements can't be known.
</p>


<h2 id='software-value-and-sturdiness'>Software Value and Sturdiness</h2>

<p>
  What is valuable software? If we measure the value of software by the capital
  invested in it, it's very difficult to discern. The budget of the Linux
  Foundation is paltry compared to the budget of any cloud computing giant that
  built an empire on top of the software. I'll assert that an empire with no
  foundation can have no value, and this makes the foundation more valuable.
  If you took the whole United States, minus its land, and plopped it into
  space somewhere, it just wouldn't last long.
</p>
<p>
  I will also assert that a fundamental value to software is not its promise of
  its potential features. With the exceptions of crypto currencies and the
  occasional crowd-funded video game, no one pays for software on speculation.
  The majority of software purchases are for software that already does
  something valuable to the customer, with the expectation that it will
  continue doing that thing in the future.
</p>
<p>
  Now, features can have value and can enrich a platform. Maybe they were not
  foreseeable, and maybe a customer really really does need them.
</p>

<hr>

<p>
  This is where I ran out of steam. Content above will be edited, content below
  will be added.
</p>
<p>
  But hey look, I made some blog software!
</p>

