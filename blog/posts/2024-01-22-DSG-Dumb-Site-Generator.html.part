<h1>The DSG</h1>

<p>
  Make your own static site generator in less than 100 lines of code.
</p>

<p><em>
  (Or clone a template and hack it up how you like.)
</em></p>

<p>
  This site is generated using a <em>Dumb Site Generator</em> pattern. (I'll
  explain...) Mine is 65 lines of <a href='https://dt.plumbing'>dt</a> source
  code. The language is early and a bit rough. If you're interested, take a
  look at <a href='https://github.com/so-dang-cool/so.dang.cool'>the sources</a>.
</p>

<p>
  I liked the pattern, so I wrote a few more example static site generators as
  GitHub template repositories. Each is less than 100 lines of code. I'll
  explain what I'm up to first. The examples are at the end.
</p>

<h2>DSG - The Dumb Site Generator</h2>

<p>
  The distilled form of DSG is to lay out website files like this:
</p>

<pre>
.
├── index.html
├── style.css
└── blog
    ├── 2024-01-01-Some-post-title/index.html
    ├── ...more posts
    └── index.html (list)
</pre>

<p>
  And we generate that from sources laid out like this:
</p>

<pre>
.
├── gen.script
├── site.html.template
├── Welcome.index.html.part
├── ...more pages
├── style.css
└── blog
    ├── 2024-01-01.Some-post-title.html.part
    └── ...more posts
</pre>

<p>
  site.html.template is the common header and footer content for all pages. The
  "ETC.part" files are partials. In the most basic uses of DSG, the content for
  the index.html page may be short enough that there is no need for a separate
</p>

<p>
  The style.css is static css with no processing. It's intended to be linked
  from the site.html.template.
</p>

<p>
  The "generator script" is some minimal script that does the following:
</p>

<ol>
  <li>
    Render pages. They should be in the format: <pre>{Page-Title}.{filename}.{EXT}.part</pre>
    with dashes substituted as spaces. <em>(Hack on it! If you prefer another
    delimiter, do it. Same goes for everything else)</em>
  </li>
  <li>
    Render each blog post. Use the site.html.template file and insert the title
    (from the filename) and the post content.
  </li>
  <li>
    Render a page listing and linking each blog post. If the post filenames are
    formatted as described below, a simple lexical sort can put them all in
    order.
  </li>
</ol>

<p>
  If you can't get this done in your language in less than 100 lines of code,
  something is probably going wrong. Ask somebody for help!
</p>

<p>
  The posts intentionally bake the date, title, and source format into the
  filename. The purest form of DSG will use just HTML. The "part" part is
  short for "partial." Blog post filenames follow this naming format:
</p>

<pre>
  {YYYY-MM-DD}-{The-post-title}.{EXT}.part
</pre>

<p>
  By default, DSG uses html as the pre-processing markup language. Lots of
  people like to dog on HTML, and some even have valid points like
  <a href='https://www.youtube.com/watch?v=FvmTSpJU-Xc&t=1081s'>Alan Kay</a>,
  but HTML has remained the dominant markup language of the web for more than
  30 years, so I'll assert it's a safe bet for a website.
</p>

<h2><em>Your</em> DSG?</h2>

<p>
  DSG is a very basic pattern with lots of opinions on everything. It's for the
  DIY crowd, so the idea is <em>NOT</em> that this is an optimal website layout.
  The idea is that this is going to be doing almost everything a basic website
  will need, and you can take the DSG idea (from a template?) and shape it into
  whatever you <em>really</em> want.
</p>

<p>
  In other words, the DSG is like a seed. A do-it-yourselfer can take as a
  starting point, and nurture it over time into something more organic and
  personal. Or don't take a DSG at all, but just look at it and how it works
  and use that as inspiration that <em>you</em> can do this on your own.
</p>

<p>
  Prefer some other format? Markdown, AsciiDoc, reStructuredText? Add that in.
  Prefer more page types, more templates, or a different layout? You got this.
  Go make a website without worrying about details of a website framework.
</p>

<h2>Quick Aside</h2>

<p>
  With DSG I'm <em>NOT</em> trying to make any kind of statement about other
  static site generators. They are just for a different audience than the DIY
  kinda folks that this is for.
</p>

<p>
  I've used a number of other SSGs, and fiddlier things like React, Vue, and
  Angular. I've been at this game for a while and have also used older things
  like WordPress, SharePoint, and Dreamweaver, and also more exotic things.
  None of these are quite what I want for my own simple sites, so I'm just
  going to make my own stuff and tailor it over time to the site.
</p>

<h2>Get Started</h2>

<p>
  The canonical example and starting point template I'll recommend is this
  no-dependency DSG that uses only POSIX utilities. You don't even need bash or
  zsh.
</p>

<ul>
  <li><a href='https://booniepepper.github.io/dsg-posix'>
    The Site
  </a></li>
  <li><a href='https://github.com/booniepepper/dsg-posix'>
    Its Sources
  </a></li>
</ul>

<p><em>
  Note: If you clone the template and choose to host it on GitHub Pages,
  <a href='https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#publishing-with-a-custom-github-actions-workflow'>
  enable the workflow</a> that's included with the project. You may need to
  manually run it the first time from the repository's "Actions" if it ran and
  failed due to permissions.
</em></p>

<p>
  For more DSG options in programming languages and markup languages, find (and
  please share!) DSG templates, example sites, and articles here:
</p>

<ul>
  <li><a href='https://github.com/so-dang-cool/awesome-dsg'>
    Awesome DSG
  </a></li>
</ul>

<h2>Updates</h2>

<ul>
  <li>
    A friend informed me I'm not the first person to make a POSIX shell static
    site generator. Credit on being first goes to
    <a href='https://romanzolotarev.com/ssg.html'>Roman Zolotarev's SSG</a>.
  </li>
</ul>
